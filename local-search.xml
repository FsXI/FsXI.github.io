<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringBoot集成Mybatis2（附带整合Junit和lombok）</title>
    <link href="/2020/04/20/SpringBoot%E9%9B%86%E6%88%90Mybatis2%EF%BC%88%E9%99%84%E5%B8%A6%E6%95%B4%E5%90%88Junit%E5%92%8Clombok%EF%BC%89/"/>
    <url>/2020/04/20/SpringBoot%E9%9B%86%E6%88%90Mybatis2%EF%BC%88%E9%99%84%E5%B8%A6%E6%95%B4%E5%90%88Junit%E5%92%8Clombok%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>掘金地址：<a href="https://juejin.im/post/5d37faf16fb9a07f03577c97" target="_blank" rel="noopener">https://juejin.im/post/5d37faf16fb9a07f03577c97</a></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>自己现在也是在初学springboot，在之前开发时用过ssm架构，觉得步骤有点繁琐，进而了解到springboot。</p><p>SpringBoot对上述Spring的缺点进行的改善和优化，基于约定优于配置的思想，可以让开发人员不必在配置与逻辑业务之间进行思维的切换，全身心的投入到逻辑业务的代码编写中，从而大大提高了开发的效率，一定程度上缩短了项目周期。</p><h3 id="springboot的特点："><a href="#springboot的特点：" class="headerlink" title="springboot的特点："></a>springboot的特点：</h3><ul><li><p>起步依赖</p><p>起步依赖本质上是一个Maven项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。</p><p>简单的说，起步依赖就是将具备某种功能的坐标打包到一起，并提供一些默认的功能。</p></li><li><p>自动配置</p><p>Spring Boot的自动配置是一个运行时（更准确地说，是应用程序启动时）的过程，考虑了众多因素，才决定Spring配置应该用哪个，不该用哪个。该过程是Spring自动完成的。</p></li></ul><h2 id="第一步：新建一个springboot-maven工程"><a href="#第一步：新建一个springboot-maven工程" class="headerlink" title="第一步：新建一个springboot maven工程"></a>第一步：新建一个springboot maven工程</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS83LzI0LzE2YzIyYjA5OGQ5ZmQzYTM" srcset="/img/loading.gif" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS83LzI0LzE2YzIyYjE1YWI5ZjM0YTc" srcset="/img/loading.gif" alt=""><br>勾选一下 web starter</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS83LzI0LzE2YzIyYjFjMjIwMDQzZTE" srcset="/img/loading.gif" alt=""></p><h2 id="第二步：添加Mybatis依赖和数据库驱动信息"><a href="#第二步：添加Mybatis依赖和数据库驱动信息" class="headerlink" title="第二步：添加Mybatis依赖和数据库驱动信息"></a>第二步：添加Mybatis依赖和数据库驱动信息</h2><pre><code class="hljs plain">&lt;!--mybatis起步依赖--&gt;       &lt;dependency&gt;           &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;           &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;           &lt;version&gt;1.1.1&lt;&#x2F;version&gt;       &lt;&#x2F;dependency&gt;       &lt;!-- MySQL连接驱动 --&gt;       &lt;dependency&gt;           &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;           &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;       &lt;&#x2F;dependency&gt;</code></pre><h2 id="第三步：在application-properties中添加数据量的连接信息和创建简单的user表"><a href="#第三步：在application-properties中添加数据量的连接信息和创建简单的user表" class="headerlink" title="第三步：在application.properties中添加数据量的连接信息和创建简单的user表"></a>第三步：在application.properties中添加数据量的连接信息和创建简单的user表</h2><pre><code class="hljs plain">#DB Configuration:spring.datasource.driverClassName&#x3D;com.mysql.jdbc.Driver spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8 spring.datasource.username&#x3D;root spring.datasource.password&#x3D;root</code></pre><pre><code class="hljs plain">-- ---------------------------- -- Table structure for &#96;user&#96; -- ---------------------------- DROP TABLE IF EXISTS &#96;user&#96;; CREATE TABLE &#96;user&#96; (&#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,&#96;username&#96; varchar(50) DEFAULT NULL, &#96;password&#96; varchar(50) DEFAULT NULL, &#96;name&#96; varchar(50) DEFAULT NULL, PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;10 DEFAULT CHARSET&#x3D;utf8;-- ------------------------------ Records of user-- ----------------------------INSERT INTO &#96;user&#96; VALUES (&#39;1&#39;, &#39;zhangsan&#39;, &#39;123&#39;, &#39;张三&#39;); INSERT INTO &#96;user&#96; VALUES (&#39;2&#39;, &#39;lisi&#39;, &#39;123&#39;, &#39;李四&#39;);</code></pre><h2 id="第四步：创建实体Bean（在这里推荐使用lombok插件，减少代码量）"><a href="#第四步：创建实体Bean（在这里推荐使用lombok插件，减少代码量）" class="headerlink" title="第四步：创建实体Bean（在这里推荐使用lombok插件，减少代码量）"></a>第四步：创建实体Bean（在这里推荐使用lombok插件，减少代码量）</h2><p>lombok的学习看我上一篇文章：<a href="https://blog.csdn.net/weixin_42634260/article/details/97021227" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42634260/article/details/97021227</a></p><pre><code class="hljs plain">&lt;!--lombok--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;            &lt;version&gt;1.16.6&lt;&#x2F;version&gt;        &lt;&#x2F;dependency&gt;</code></pre><pre><code class="hljs plain">@Datapublic class user &#123;    private Integer id;    private String username;    private String password;    private String name;&#125;</code></pre><h2 id="第五步：编写Mapper"><a href="#第五步：编写Mapper" class="headerlink" title="第五步：编写Mapper"></a>第五步：编写Mapper</h2><pre><code class="hljs plain">@Mapperpublic interface UserMapper &#123;    public List&lt;User&gt; queryUserList();&#125;</code></pre><p>注意:@Mapper标记该类是一个mybatis的mapper接口，可以被spring boot自动扫描到spring上下文中</p><h2 id="第六步：配置Mapper映射文件"><a href="#第六步：配置Mapper映射文件" class="headerlink" title="第六步：配置Mapper映射文件"></a>第六步：配置Mapper映射文件</h2><p>在src\main\resources\mapper路径下加入UserMapper.xml配置文件</p><pre><code class="hljs plain">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot; &gt;&lt;mapper namespace&#x3D;&quot;com.itheima.mapper.UserMapper&quot;&gt;&lt;select id&#x3D;&quot;queryUserList&quot; resultType&#x3D;&quot;user&quot;&gt; select * from user&lt;&#x2F;select&gt; &lt;&#x2F;mapper&gt;</code></pre><h2 id="第七步：在application-properties中添加mybatis的信息"><a href="#第七步：在application-properties中添加mybatis的信息" class="headerlink" title="第七步：在application.properties中添加mybatis的信息"></a>第七步：在application.properties中添加mybatis的信息</h2><pre><code class="hljs plain">#spring集成Mybatis环境#pojo别名扫描包 mybatis.type-aliases-package&#x3D;com.itheima.domain #加载Mybatis映射文件 mybatis.mapper-locations&#x3D;classpath:mapper&#x2F;*Mapper.xml</code></pre><h2 id="第八步：编写controller测试类"><a href="#第八步：编写controller测试类" class="headerlink" title="第八步：编写controller测试类"></a>第八步：编写controller测试类</h2><pre><code class="hljs plain">@Controllerpublic class MapperController &#123;    @Autowired    private UserMapper userMapper;    @RequestMapping(&quot;&#x2F;queryUser&quot;)    @ResponseBody    public List&lt;User&gt; queryUser()&#123;        List&lt;User&gt; users &#x3D; userMapper.queryUserList();        return users;    &#125;&#125;</code></pre><h3 id="最后一步：测试，运行代码（注意idea在创建项目时它本身已经帮我们创建了一个SpringBoot引导类）"><a href="#最后一步：测试，运行代码（注意idea在创建项目时它本身已经帮我们创建了一个SpringBoot引导类）" class="headerlink" title="最后一步：测试，运行代码（注意idea在创建项目时它本身已经帮我们创建了一个SpringBoot引导类）"></a>最后一步：测试，运行代码（注意idea在创建项目时它本身已经帮我们创建了一个SpringBoot引导类）</h3><pre><code class="hljs plain">@SpringBootApplicationpublic class SpringbootMybatisApplication &#123;    public static void main(String[] args) &#123;        SpringApplication.run(SpringbootMybatisApplication.class, args);    &#125;&#125;</code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS83LzI0LzE2YzIyYmRiODljMWNjMTc" srcset="/img/loading.gif" alt=""></p><h2 id="随便唠叨一下，springboot继承Junit也是非常简单的"><a href="#随便唠叨一下，springboot继承Junit也是非常简单的" class="headerlink" title="随便唠叨一下，springboot继承Junit也是非常简单的"></a>随便唠叨一下，springboot继承Junit也是非常简单的</h2><h3 id="首先还是添加一下Junit的依赖"><a href="#首先还是添加一下Junit的依赖" class="headerlink" title="首先还是添加一下Junit的依赖"></a>首先还是添加一下Junit的依赖</h3><pre><code class="hljs plain">&lt;!--测试的起步依赖--&gt; &lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;&lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;&lt;scope&gt;test&lt;&#x2F;scope&gt;&lt;&#x2F;dependency&gt;</code></pre><h3 id="编写测试类，目录结构如下"><a href="#编写测试类，目录结构如下" class="headerlink" title="编写测试类，目录结构如下"></a>编写测试类，目录结构如下</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS83LzI0LzE2YzIyYzBkYzNjZTU0YTA" srcset="/img/loading.gif" alt=""></p><pre><code class="hljs plain">@RunWith(SpringRunner.class)@SpringBootTest(classes &#x3D; SpringbootMybatisApplication.class)public class MybatisTest &#123;    @Autowired    private UserMapper userMapper;    @Test    public void test()&#123;        List&lt;User&gt; users &#x3D; userMapper.queryUserList();        System.out.println(users);    &#125;&#125;</code></pre><p>其中， SpringRunner继承自SpringJUnit4ClassRunner，使用哪一个Spring提供的测试测试引擎都可以</p><pre><code class="hljs plain">public final class SpringRunner extends SpringJUnit4ClassRunner</code></pre><p>@SpringBootTest的属性指定的是引导类的字节码对象。</p><h2 id="run一下，在控制台打印信息"><a href="#run一下，在控制台打印信息" class="headerlink" title="run一下，在控制台打印信息"></a>run一下，在控制台打印信息</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS83LzI0LzE2YzIyYzM3M2E4ZmM0ODQ" srcset="/img/loading.gif" alt=""></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>在学习springboot的过程中，要有一种深挖源码的习惯，springboot在开发中给予了我们极大的便利，但是自己要能清晰的明白每个步骤底层的原理是怎样实现的。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="/2020/04/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/2020/04/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>好了，我又要重新折腾你了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/04/20/hello-world/"/>
    <url>/2020/04/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
